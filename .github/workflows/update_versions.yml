name: Update Software Versions

on:
  workflow_dispatch: # Allows manual triggering
  # schedule:
  #   - cron: '0 2 * * 1' # Runs every Monday at 02:00 UTC

jobs:
  check_versions:
    runs-on: ubuntu-latest
    outputs:
      updates_available: ${{ steps.compare_versions.outputs.updates_available }}
      GCLOUD_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.GCLOUD_NEEDS_UPDATE }}
      NEW_GCLOUD_VERSION: ${{ steps.compare_versions.outputs.NEW_GCLOUD_VERSION }}
      PACKER_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.PACKER_NEEDS_UPDATE }}
      NEW_PACKER_VERSION: ${{ steps.compare_versions.outputs.NEW_PACKER_VERSION }}
      TERRAFORM_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.TERRAFORM_NEEDS_UPDATE }}
      NEW_TERRAFORM_VERSION: ${{ steps.compare_versions.outputs.NEW_TERRAFORM_VERSION }}
      TERRAFORM_DOCS_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.TERRAFORM_DOCS_NEEDS_UPDATE }}
      NEW_TERRAFORM_DOCS_VERSION: ${{ steps.compare_versions.outputs.NEW_TERRAFORM_DOCS_VERSION }}
      TERRAGRUNT_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.TERRAGRUNT_NEEDS_UPDATE }}
      NEW_TERRAGRUNT_VERSION: ${{ steps.compare_versions.outputs.NEW_TERRAGRUNT_VERSION }}
      TFLINT_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.TFLINT_NEEDS_UPDATE }}
      NEW_TFLINT_VERSION: ${{ steps.compare_versions.outputs.NEW_TFLINT_VERSION }}
      TFSEC_NEEDS_UPDATE: ${{ steps.compare_versions.outputs.TFSEC_NEEDS_UPDATE }}
      NEW_TFSEC_VERSION: ${{ steps.compare_versions.outputs.NEW_TFSEC_VERSION }}
      GCLOUD_VERSION_CURRENT: ${{ env.GCLOUD_VERSION }}
      PACKER_VERSION_CURRENT: ${{ env.PACKER_VERSION }}
      TERRAFORM_VERSION_CURRENT: ${{ env.TERRAFORM_VERSION }}
      TERRAFORM_DOCS_VERSION_CURRENT: ${{ env.TERRAFORM_DOCS_VERSION }}
      TERRAGRUNT_VERSION_CURRENT: ${{ env.TERRAGRUNT_VERSION }}
      TFLINT_VERSION_CURRENT: ${{ env.TFLINT_VERSION }}
      TFSEC_VERSION_CURRENT: ${{ env.TFSEC_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract current software versions
        id: extract_versions
        run: |
          echo "Extracting versions from Dockerfile..."
          GCLOUD_VERSION=$(grep -oP '(?<=^ARG GCLOUD_VERSION=).*' Dockerfile)
          PACKER_VERSION=$(grep -oP '(?<=^ARG PACKER_VERSION=).*' Dockerfile)
          TERRAFORM_VERSION=$(grep -oP '(?<=^ARG TERRAFORM_VERSION=).*' Dockerfile)
          TERRAFORM_DOCS_VERSION=$(grep -oP '(?<=^ARG TERRAFORM_DOCS_VERSION=).*' Dockerfile)
          TERRAGRUNT_VERSION=$(grep -oP '(?<=^ARG TERRAGRUNT_VERSION=).*' Dockerfile)
          TFLINT_VERSION=$(grep -oP '(?<=^ARG TFLINT_VERSION=).*' Dockerfile)
          TFSEC_VERSION=$(grep -oP '(?<=^ARG TFSEC_VERSION=).*' Dockerfile)

          echo "GCLOUD_VERSION=$GCLOUD_VERSION" >> $GITHUB_ENV
          echo "PACKER_VERSION=$PACKER_VERSION" >> $GITHUB_ENV
          echo "TERRAFORM_VERSION=$TERRAFORM_VERSION" >> $GITHUB_ENV
          echo "TERRAFORM_DOCS_VERSION=$TERRAFORM_DOCS_VERSION" >> $GITHUB_ENV
          echo "TERRAGRUNT_VERSION=$TERRAGRUNT_VERSION" >> $GITHUB_ENV
          echo "TFLINT_VERSION=$TFLINT_VERSION" >> $GITHUB_ENV
          echo "TFSEC_VERSION=$TFSEC_VERSION" >> $GITHUB_ENV

          # For job outputs, if needed by other jobs (not strictly necessary if all work is in this job)
          echo "::set-output name=GCLOUD_VERSION::$GCLOUD_VERSION"
          echo "::set-output name=PACKER_VERSION::$PACKER_VERSION"
          echo "::set-output name=TERRAFORM_VERSION::$TERRAFORM_VERSION"
          echo "::set-output name=TERRAFORM_DOCS_VERSION::$TERRAFORM_DOCS_VERSION"
          echo "::set-output name=TERRAGRUNT_VERSION::$TERRAGRUNT_VERSION"
          echo "::set-output name=TFLINT_VERSION::$TFLINT_VERSION"
          echo "::set-output name=TFSEC_VERSION::$TFSEC_VERSION"
          
          echo "Current GCloud version: $GCLOUD_VERSION"
          echo "Current Packer version: $PACKER_VERSION"
          echo "Current Terraform version: $TERRAFORM_VERSION"
          echo "Current Terraform Docs version: $TERRAFORM_DOCS_VERSION"
          echo "Current Terragrunt version: $TERRAGRUNT_VERSION"
          echo "Current TFLint version: $TFLINT_VERSION"
          echo "Current TFSec version: $TFSEC_VERSION"

      - name: Fetch latest software versions
        id: fetch_latest_versions
        run: |
          echo "Fetching latest Terraform version..."
          LATEST_TERRAFORM_VERSION=$(curl -sL https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r '.current_version')
          echo "LATEST_TERRAFORM_VERSION=$LATEST_TERRAFORM_VERSION" >> $GITHUB_ENV
          echo "Latest Terraform version: $LATEST_TERRAFORM_VERSION"

          echo "Fetching latest Packer version..."
          LATEST_PACKER_TAG=$(curl -sL https://api.github.com/repos/hashicorp/packer/releases/latest | jq -r '.tag_name')
          LATEST_PACKER_VERSION=${LATEST_PACKER_TAG#v}
          echo "LATEST_PACKER_VERSION=$LATEST_PACKER_VERSION" >> $GITHUB_ENV
          echo "Latest Packer version: $LATEST_PACKER_VERSION"

          echo "Fetching latest Terraform Docs version..."
          LATEST_TERRAFORM_DOCS_TAG=$(curl -sL https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | jq -r '.tag_name')
          LATEST_TERRAFORM_DOCS_VERSION=${LATEST_TERRAFORM_DOCS_TAG#v}
          echo "LATEST_TERRAFORM_DOCS_VERSION=$LATEST_TERRAFORM_DOCS_VERSION" >> $GITHUB_ENV
          echo "Latest Terraform Docs version: $LATEST_TERRAFORM_DOCS_VERSION"

          echo "Fetching latest Terragrunt version..."
          LATEST_TERRAGRUNT_TAG=$(curl -sL https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r '.tag_name')
          LATEST_TERRAGRUNT_VERSION=${LATEST_TERRAGRUNT_TAG#v}
          echo "LATEST_TERRAGRUNT_VERSION=$LATEST_TERRAGRUNT_VERSION" >> $GITHUB_ENV
          echo "Latest Terragrunt version: $LATEST_TERRAGRUNT_VERSION"

          echo "Fetching latest TFLint version..."
          LATEST_TFLINT_TAG=$(curl -sL https://api.github.com/repos/terraform-linters/tflint/releases/latest | jq -r '.tag_name')
          LATEST_TFLINT_VERSION=${LATEST_TFLINT_TAG#v}
          echo "LATEST_TFLINT_VERSION=$LATEST_TFLINT_VERSION" >> $GITHUB_ENV
          echo "Latest TFLint version: $LATEST_TFLINT_VERSION"

          echo "Fetching latest TFSec version..."
          LATEST_TFSEC_TAG=$(curl -sL https://api.github.com/repos/aquasecurity/tfsec/releases/latest | jq -r '.tag_name')
          LATEST_TFSEC_VERSION=${LATEST_TFSEC_TAG#v}
          echo "LATEST_TFSEC_VERSION=$LATEST_TFSEC_VERSION" >> $GITHUB_ENV
          echo "Latest TFSec version: $LATEST_TFSEC_VERSION"
          
          echo "Fetching latest GCloud version..."
          LATEST_GCLOUD_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/google/cloud-sdk/tags/" | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "LATEST_GCLOUD_VERSION=$LATEST_GCLOUD_VERSION" >> $GITHUB_ENV
          echo "Latest GCloud version: $LATEST_GCLOUD_VERSION"

      - name: Compare versions and set update flag
        id: compare_versions
        run: |
          echo "Comparing versions..."
          UPDATES_FOUND=false

          # GCLOUD
          echo "Current GCLOUD: $GCLOUD_VERSION, Latest GCLOUD: $LATEST_GCLOUD_VERSION"
          if [ "$GCLOUD_VERSION" != "$LATEST_GCLOUD_VERSION" ]; then
            echo "GCLOUD needs update: $LATEST_GCLOUD_VERSION"
            echo "::set-output name=GCLOUD_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_GCLOUD_VERSION::$LATEST_GCLOUD_VERSION"
            UPDATES_FOUND=true
          else
            echo "::set-output name=GCLOUD_NEEDS_UPDATE::false"
          fi

          # PACKER
          echo "Current PACKER: $PACKER_VERSION, Latest PACKER: $LATEST_PACKER_VERSION"
          if [ "$PACKER_VERSION" != "$LATEST_PACKER_VERSION" ]; then
            echo "PACKER needs update: $LATEST_PACKER_VERSION"
            echo "::set-output name=PACKER_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_PACKER_VERSION::$LATEST_PACKER_VERSION"
            UPDATES_FOUND=true
          else
            echo "::set-output name=PACKER_NEEDS_UPDATE::false"
          fi

          # TERRAFORM
          echo "Current TERRAFORM: $TERRAFORM_VERSION, Latest TERRAFORM: $LATEST_TERRAFORM_VERSION"
          if [ "$TERRAFORM_VERSION" != "$LATEST_TERRAFORM_VERSION" ]; then
            echo "TERRAFORM needs update: $LATEST_TERRAFORM_VERSION"
            echo "::set-output name=TERRAFORM_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_TERRAFORM_VERSION::$LATEST_TERRAFORM_VERSION"
            UPDATES_FOUND=true
          else
            echo "::set-output name=TERRAFORM_NEEDS_UPDATE::false"
          fi

          # TERRAFORM_DOCS
          echo "Current TERRAFORM_DOCS: $TERRAFORM_DOCS_VERSION, Latest TERRAFORM_DOCS: $LATEST_TERRAFORM_DOCS_VERSION"
          if [ "$TERRAFORM_DOCS_VERSION" != "$LATEST_TERRAFORM_DOCS_VERSION" ]; then
            echo "TERRAFORM_DOCS needs update: $LATEST_TERRAFORM_DOCS_VERSION"
            echo "::set-output name=TERRAFORM_DOCS_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_TERRAFORM_DOCS_VERSION::$LATEST_TERRAFORM_DOCS_VERSION"
            UPDATES_FOUND=true
          else
            echo "::set-output name=TERRAFORM_DOCS_NEEDS_UPDATE::false"
          fi

          # TERRAGRUNT - current version has 'v' prefix, latest might not after stripping
          CURRENT_TERRAGRUNT_VERSION_NO_V=${TERRAGRUNT_VERSION#v}
          echo "Current TERRAGRUNT: $CURRENT_TERRAGRUNT_VERSION_NO_V, Latest TERRAGRUNT: $LATEST_TERRAGRUNT_VERSION"
          if [ "$CURRENT_TERRAGRUNT_VERSION_NO_V" != "$LATEST_TERRAGRUNT_VERSION" ]; then
            echo "TERRAGRUNT needs update: v$LATEST_TERRAGRUNT_VERSION" # Add 'v' back for the new version value
            echo "::set-output name=TERRAGRUNT_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_TERRAGRUNT_VERSION::v$LATEST_TERRAGRUNT_VERSION" # Store with 'v'
            UPDATES_FOUND=true
          else
            echo "::set-output name=TERRAGRUNT_NEEDS_UPDATE::false"
          fi

          # TFLINT
          echo "Current TFLINT: $TFLINT_VERSION, Latest TFLINT: $LATEST_TFLINT_VERSION"
          if [ "$TFLINT_VERSION" != "$LATEST_TFLINT_VERSION" ]; then
            echo "TFLINT needs update: $LATEST_TFLINT_VERSION"
            echo "::set-output name=TFLINT_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_TFLINT_VERSION::$LATEST_TFLINT_VERSION"
            UPDATES_FOUND=true
          else
            echo "::set-output name=TFLINT_NEEDS_UPDATE::false"
          fi

          # TFSEC
          echo "Current TFSEC: $TFSEC_VERSION, Latest TFSEC: $LATEST_TFSEC_VERSION"
          if [ "$TFSEC_VERSION" != "$LATEST_TFSEC_VERSION" ]; then
            echo "TFSEC needs update: $LATEST_TFSEC_VERSION"
            echo "::set-output name=TFSEC_NEEDS_UPDATE::true"
            echo "::set-output name=NEW_TFSEC_VERSION::$LATEST_TFSEC_VERSION"
            UPDATES_FOUND=true
          else
            echo "::set-output name=TFSEC_NEEDS_UPDATE::false"
          fi

          if [ "$UPDATES_FOUND" = true ]; then
            echo "::set-output name=updates_available::true"
            echo "Updates are available."
          else
            echo "::set-output name=updates_available::false"
            echo "No updates found."
          fi

  update_dockerfile_and_pr:
    needs: check_versions
    if: needs.check_versions.outputs.updates_available == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main # Or your default branch

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update Dockerfile ARG versions
        run: |
          echo "Updating Dockerfile..."
          # GCLOUD
          if [ "${{ needs.check_versions.outputs.GCLOUD_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating GCLOUD version from ${{ needs.check_versions.outputs.GCLOUD_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_GCLOUD_VERSION }}"
            sed -i "s/^ARG GCLOUD_VERSION=.*/ARG GCLOUD_VERSION=${{ needs.check_versions.outputs.NEW_GCLOUD_VERSION }}/" Dockerfile
          fi
          # PACKER
          if [ "${{ needs.check_versions.outputs.PACKER_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating PACKER version from ${{ needs.check_versions.outputs.PACKER_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_PACKER_VERSION }}"
            sed -i "s/^ARG PACKER_VERSION=.*/ARG PACKER_VERSION=${{ needs.check_versions.outputs.NEW_PACKER_VERSION }}/" Dockerfile
          fi
          # TERRAFORM
          if [ "${{ needs.check_versions.outputs.TERRAFORM_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating TERRAFORM version from ${{ needs.check_versions.outputs.TERRAFORM_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_TERRAFORM_VERSION }}"
            sed -i "s/^ARG TERRAFORM_VERSION=.*/ARG TERRAFORM_VERSION=${{ needs.check_versions.outputs.NEW_TERRAFORM_VERSION }}/" Dockerfile
          fi
          # TERRAFORM_DOCS
          if [ "${{ needs.check_versions.outputs.TERRAFORM_DOCS_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating TERRAFORM_DOCS version from ${{ needs.check_versions.outputs.TERRAFORM_DOCS_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_TERRAFORM_DOCS_VERSION }}"
            sed -i "s/^ARG TERRAFORM_DOCS_VERSION=.*/ARG TERRAFORM_DOCS_VERSION=${{ needs.check_versions.outputs.NEW_TERRAFORM_DOCS_VERSION }}/" Dockerfile
          fi
          # TERRAGRUNT
          if [ "${{ needs.check_versions.outputs.TERRAGRUNT_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating TERRAGRUNT version from ${{ needs.check_versions.outputs.TERRAGRUNT_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_TERRAGRUNT_VERSION }}"
            sed -i "s/^ARG TERRAGRUNT_VERSION=.*/ARG TERRAGRUNT_VERSION=${{ needs.check_versions.outputs.NEW_TERRAGRUNT_VERSION }}/" Dockerfile
          fi
          # TFLINT
          if [ "${{ needs.check_versions.outputs.TFLINT_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating TFLINT version from ${{ needs.check_versions.outputs.TFLINT_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_TFLINT_VERSION }}"
            sed -i "s/^ARG TFLINT_VERSION=.*/ARG TFLINT_VERSION=${{ needs.check_versions.outputs.NEW_TFLINT_VERSION }}/" Dockerfile
          fi
          # TFSEC
          if [ "${{ needs.check_versions.outputs.TFSEC_NEEDS_UPDATE }}" == "true" ]; then
            echo "Updating TFSEC version from ${{ needs.check_versions.outputs.TFSEC_VERSION_CURRENT }} to ${{ needs.check_versions.outputs.NEW_TFSEC_VERSION }}"
            sed -i "s/^ARG TFSEC_VERSION=.*/ARG TFSEC_VERSION=${{ needs.check_versions.outputs.NEW_TFSEC_VERSION }}/" Dockerfile
          fi
          echo "Dockerfile updates complete."
          echo "Showing diff of Dockerfile:"
          git diff Dockerfile

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |-
            Chore: Update software versions in Dockerfile

            Automated update of software versions based on latest releases.
          branch: "update-versions/auto-${{ github.run_id }}"
          delete-branch: true
          title: "Chore: Update software versions in Dockerfile"
          body: |
            Automated weekly check found updated versions for the following tools:

            ${{ needs.check_versions.outputs.GCLOUD_NEEDS_UPDATE == 'true' && format('- GCloud: {0} -> {1}', needs.check_versions.outputs.GCLOUD_VERSION_CURRENT, needs.check_versions.outputs.NEW_GCLOUD_VERSION) }}
            ${{ needs.check_versions.outputs.PACKER_NEEDS_UPDATE == 'true' && format('- Packer: {0} -> {1}', needs.check_versions.outputs.PACKER_VERSION_CURRENT, needs.check_versions.outputs.NEW_PACKER_VERSION) }}
            ${{ needs.check_versions.outputs.TERRAFORM_NEEDS_UPDATE == 'true' && format('- Terraform: {0} -> {1}', needs.check_versions.outputs.TERRAFORM_VERSION_CURRENT, needs.check_versions.outputs.NEW_TERRAFORM_VERSION) }}
            ${{ needs.check_versions.outputs.TERRAFORM_DOCS_NEEDS_UPDATE == 'true' && format('- Terraform Docs: {0} -> {1}', needs.check_versions.outputs.TERRAFORM_DOCS_VERSION_CURRENT, needs.check_versions.outputs.NEW_TERRAFORM_DOCS_VERSION) }}
            ${{ needs.check_versions.outputs.TERRAGRUNT_NEEDS_UPDATE == 'true' && format('- Terragrunt: {0} -> {1}', needs.check_versions.outputs.TERRAGRUNT_VERSION_CURRENT, needs.check_versions.outputs.NEW_TERRAGRUNT_VERSION) }}
            ${{ needs.check_versions.outputs.TFLINT_NEEDS_UPDATE == 'true' && format('- TFLint: {0} -> {1}', needs.check_versions.outputs.TFLINT_VERSION_CURRENT, needs.check_versions.outputs.NEW_TFLINT_VERSION) }}
            ${{ needs.check_versions.outputs.TFSEC_NEEDS_UPDATE == 'true' && format('- TFSec: {0} -> {1}', needs.check_versions.outputs.TFSEC_VERSION_CURRENT, needs.check_versions.outputs.NEW_TFSEC_VERSION) }}

            Please review and merge.
          labels: "dependencies, automated pr"
